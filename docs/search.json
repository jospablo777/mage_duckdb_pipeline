[
  {
    "objectID": "data_pipeline_mage.html#where-are-we-in-the-data-lifecycle",
    "href": "data_pipeline_mage.html#where-are-we-in-the-data-lifecycle",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Where are we in the data lifecycle?",
    "text": "Where are we in the data lifecycle?\nAs data analysts or scientists, we often find ourselves working downstream in the data lifecycle. Most of the time, our role involves transforming and analyzing data that has already been prepared and served to us by upstream processes. However, having a deeper understanding of the entire data pipeline—from ingestion to transformation and storage—can empower us to optimize workflows, ensure data quality, and unlock new insights.\n\n\n\nThe data lifecycle and where you are. Modified from “Fundamentals of Data Engineering” by Reis & Housley (2022).\n\n\nAnother advantage of gaining understanding—and hands-on experience—in data engineering processes is the empathy we build with our data engineers. These are the colleagues we work closely with and rely on, making a strong, collaborative relationship essential. Hence, in this hands-on article, we will explore the Python ecosystem by examining tools such as Mage, Polars, and DuckDB. We’ll demonstrate how these tools can help us build efficient, lightweight data pipelines that take data from the source and store it in a format that is well-suited for high-performance analytics."
  },
  {
    "objectID": "data_pipeline_mage.html#about-the-tools",
    "href": "data_pipeline_mage.html#about-the-tools",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "About the tools",
    "text": "About the tools\nIn this project, we will use Mage as our data orchestrator. The tasks managed by the orchestrator will include data manipulation and transformation using Polars, as well as persistent storage with DuckDB.\n\nWhat are data orchestrators?\nData orchestrators, such as Mage, are tools that help manage, schedule, and monitor workflows in data pipelines. They allow us to automate complex processes, ensuring that tasks are executed in the correct order and dependencies are handled seamlessly. By using Mage as our orchestrator, we can streamline our data pipeline and focus on building efficient workflows that allow us to set a local database appropriate for our analysis.\n\n\nData manipulation and storage\nWhy Polars and DuckDB? The answer lies in the size and nature of the dataset we’re working with. Since our dataset is small enough to fit in memory, we don’t need a distributed system like Spark. Polars, with its fast and memory-efficient operations, is perfect for data manipulation and transformation. Meanwhile, DuckDB provides a lightweight, yet powerful, SQL-based engine for persistent storage and querying. Together, these tools offer a simple, performant, and highly efficient solution for handling our data pipeline.\nReturning to the data lifecycle diagram, we can land it in a more concrete way to show how our project will be built and executed:\n\n\n\n\n\n\nNamed figure 1: The data lifecycle and a more concrete overview of what we will implement in this project. Modified from “Fundamentals of Data Engineering” by Reis & Housley (2022).\n\n\n\nFirst, we will fetch the data from the Socrata Open Data API (SODA) through HTTP. After that, we will generate some extra variables of our interest with Polars, to finally store it in a DuckDB database we will consume for analytics and predictive modeling. All this is orchestrated with Mage.\n\n\nTools and resources overview:\n\nSODA API: provides access to open datasets, serving as our data source. It contains “a wealth of open data resources from governments, non-profits, and NGOs around the world1.”\nMage: the data orchestrator that will automate and manage the pipeline.\nPolars: a high-performance data frame library implemented in Rust, ideal for fast data manipulation.\nDuckDB: a columnar database system designed for efficient analytics and in-memory processing.\n\nWe’ve chosen the Iowa Liquor Sales dataset since it is big enough to make this ETL (extract, transform, load) pipeline interesting."
  },
  {
    "objectID": "data_pipeline_mage.html#our-problem",
    "href": "data_pipeline_mage.html#our-problem",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Our problem",
    "text": "Our problem\nLet’s say we work for a big chain of liquor stores in the US, Iowa. Part of the intelligence in your company is built upon the information made available through SODA API, and it feeds some of the dashboards the decision-makers consume. You also use it often to do research and predictive modeling. Some stakeholders have started complaining about the loading times of the dashboards, and you have also been a little frustrated with the time it takes to get the data to train your predictive models.\n\nTo continue building our situation, let’s imagine the year 2020—when the term “data engineer” was not as popular as it is today. You’ve just been hired as a data analyst2, and according to Google Trends, the term “data engineer” was only half as popular as it is now. Moreover, a closer look at the trend data from 2020 reveals that most searches for this term originated in tech hubs like California or Washington rather than in states like Iowa.\n\n\n\n\n\nGoogle trends for ‘Data Engineering’ in the US, starting from 2004 to the date (Dec 2024)\n\n\n\n\nAt this point, you know you are on your own to optimize this process3. And you already have a clear outline for this process:\n\nPull the data from the API.\nGenerate the variables that provide the most valuable insights for the team️.\nStore the data in a location that allows for easy and fast retrieval .\n\nThis brings us to our current challenge: finding a more agile and efficient way to make the SODA liquor sales data accessible to the rest of the company."
  },
  {
    "objectID": "data_pipeline_mage.html#solution-implementation-getting-started",
    "href": "data_pipeline_mage.html#solution-implementation-getting-started",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Solution implementation: getting started",
    "text": "Solution implementation: getting started\nAs outlined earlier, the first step involves pulling the data from the API. However, before that, we need to set up Mage and configure the rest of our environment. To begin, we’ll clone the Git project and navigate to the project directory:\n\ngit clone https://github.com/jospablo777/mage_duckdb_pipeline.git\ncd mage_duckdb_pipeline\n\nNext, we’ll set up a virtual environment and install the necessary libraries:\n\npython -m venv venv             # The first 'venv' is the command, the second is the name of the folder for the virtual environment.\nsource venv/bin/activate        # Activate the virtual environment.\npip install -r requirements.txt # Install dependencies from the requirements file.\n\nThe requirements.txt file contains the libraries required for the project, with the key players being mage-ai, polars, and duckdb. Now, that we have all our dependencies ready we can start our Mage project with:\n\nmage start\n\nThis will open a tab in our browser that looks like this:\n\n\n\nMage home UI.\n\n\nOne of Mage’s greatest strengths is its intuitive user interface. It allows us to easily create and manage data pipelines. In this example, we’ve named our pipeline socrata_iowa_liquor_pipeline. Once the pipeline is created, we can navigate to it using the left panel, then go to the Pipelines section, where our newly created pipeline will be listed, click on it.\n\n\n\nMage home UI left panel.\n\n\nAfter opening the pipeline, navigate to the Edit pipeline section in the left panel, identified by the &lt;/&gt; symbol. This is where we can begin constructing our pipeline. Here, you will have the option to insert a block:\n\n\n\nCreate block options.\n\n\nOur objective is to build the following pipeline using a series of different blocks:\n\n\n\nPipeline we will implement in this projec.\n\n\nGreat! Now that our environment is set up and we’ve familiarized ourselves with Mage’s user interface, we’ll return to Mage shortly. But first, let’s take a closer look at our data source: the Iowa Liquor Sales dataset."
  },
  {
    "objectID": "data_pipeline_mage.html#about-the-polar-bear-in-the-header",
    "href": "data_pipeline_mage.html#about-the-polar-bear-in-the-header",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "About the polar bear in the header",
    "text": "About the polar bear in the header\nIt’s the Bonjour Bear, you can read more about the bear in Know Your Meme :)"
  },
  {
    "objectID": "data_pipeline_mage.html#cited-works-and-recommended-readings",
    "href": "data_pipeline_mage.html#cited-works-and-recommended-readings",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Cited works and recommended readings",
    "text": "Cited works and recommended readings\n\nKersten, T., Leis, V., Kemper, A., Neumann, T., Pavlo, A., & Boncz, P. (2018). Everything you always wanted to know about compiled and vectorized queries but were afraid to ask. Proceedings of the VLDB Endowment, 11(13), 2209-2222. https://doi.org/10.14778/3275366.3275370.\nReis, J., & Housley, M. (2022). Fundamentals of data engineering: Plan and build robust data systems. O’Reilly Media."
  },
  {
    "objectID": "data_pipeline_mage.html#footnotes",
    "href": "data_pipeline_mage.html#footnotes",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAccording to their web page :)↩︎\nThere is no budget for a “scientist,” and at this point in history, there is no such thing as a “data engineer” in Latin America Iowa.↩︎\nPlease pretend that the tools existed at the time. I certainly wished for a data ecosystem like this, and I was in Latin America (Little Mai and I still are, and we’re loving it 🪇🐑).↩︎\nI spent a few days debugging this and initially signaled Mage as the culprit, but in the end, the SODA API was responsible.↩︎\nThe process will get frozen at some point with no notifications or feedback.↩︎\nLittle Mai and I 🐑.↩︎\nThis occurs when the returned object is a data frame (Polars or Pandas). In this concrete case, that won’t happen since we’re returning a dictionary, but in the following blocks, it will be the case since the objects transferred will be Polars data frames. With dictionaries, serialization will still occur but in JSON format.↩︎\nWe can also use .pl() to cast the results into a Polars data frame or .df() for a Pandas one.↩︎\nFor instance, I should move the fetch_batch function outside the load_data_from_api loader. Defining functions within other functions is generally considered a bad practice, as it can make the code harder to read, test, and maintain.↩︎\nRepeat after me: “We love open source.”↩︎\nWe’ve found Manning a reliable editorial for technical books. Most of the time, their materials have high-quality content that is easy to digest. Highly recommended 👌.↩︎\nThe only action we did to enable the use of DuckDB was pip install duckdb.↩︎\nPlease note that this is not a traditional exporter block; it could be a custom block. I chose the exporter type because it interacts with the local database and creates the table, even though no data is exported in an explicit manner.↩︎"
  },
  {
    "objectID": "data_pipeline_mage.html#soda-api-our-data-source",
    "href": "data_pipeline_mage.html#soda-api-our-data-source",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "SODA API: our data source",
    "text": "SODA API: our data source\nThe Iowa Liquor Sales data is provided by the Iowa government through the Socrata Open Data API (SODA), a platform designed to grant access to open datasets from government agencies, non-profits, and other organizations. This API allows us to programmatically interact with our dataset of interest, enabling us to retrieve data via HTTP requests.\nThe dataset’s documentation provides the key information needed to access the data: the source domain (data.iowa.gov) and the dataset identifier (m3tr-qhgy). With this information, we can define the endpoint for sending our requests. The documentation also details the available variables and their respective data types. Below is an example of a base endpoint for this dataset:\n\nhttps://data.iowa.gov/resource/m3tr-qhgy.csv\n\nThe dataset documentation also informs us that, to date, it consists of more than 30 million rows. Now that we know the endpoint and the size of the data, we’re ready to pull the data, right?\nA sensible approach would be to retrieve the data sequentially using the paging method described in the SODA documentation. This method allows us to fetch the data in manageable batches, specified by the $limit parameter, while navigating through the dataset using the $offset parameter. The process is illustrated in the following diagram:\n\n\n\nLater rows of the data can’t be fetched due to system limits.\n\n\nNaturally, I started with this approach to find a limitation in the API that was not documented. When we get to the point of pulling the records around row 20M, the data loader will get stuck, and no information will be pulled. This might be by design or due to system limitations in which deep paginations can bog the system4, making this an unreliable method to get the data5. Meaning that we will need a different strategy to retrieve the 30M records.\nThis brings us to the next strategy: using SoQL, the query language of the Socrata API. SoQL is quite similar to SQL, with the key difference that its syntax is structured to work within a URL format.\nWe will send an HTTP request to the server to query individual batches of invoices corresponding to a specific year (based on the date variable). We represent this as follows.\n\n\n\nFetching each year individually: an incremental approach. The queries in the blocks are written in SQL for readability.\n\n\nThis approach limits pagination to the number of years in the dataset rather than the total number of records. By fetching data in yearly batches, our requests won’t get stuck at an offset of 20 million, as each year contains fewer than 3 million records.\nWhy are we spending so much time on this? Understanding our data source’s quirks, perks, and limitations is crucial because, ultimately, this knowledge will shape how we design our data pipeline. So it’s worth it to spend some time understanding the source system; it will save us headaches and result in a better design that is easier to maintain from the beginning.\nNow, we have a clearer understanding of the upper stage in our stream, the data source.\n\n\n\nProgress we’ve made so far.\n\n\nWith this in mind, we can now move on to the ingestion step."
  },
  {
    "objectID": "data_pipeline_mage.html#fetching-the-data",
    "href": "data_pipeline_mage.html#fetching-the-data",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Fetching the data",
    "text": "Fetching the data\nWe are aware of the endpoint to request the data and some limitations of this API. We know that we cannot fetch the data as it is because, at some point, our pipeline will clog, and we won’t be able to request more data from the SODA DB.\nDue to this, we will write more complex HTTP requests using SoQL, the SODA query language. SoQL syntax is similar to SQL, so if you are familiar with relational databases, learning will feel intuitive.\nOur base query to fetch the data will look something like this:\nhttps://data.iowa.gov/resource/m3tr-qhgy.csv?$where=date_extract_y(date)=2013&$limit=2000\n\nTeal: the endpoint for the data request.\nBlue: the WHERE clause of the SoQL query, used to filter records for the year 2013. The function date_extract_y() extracts the year from the date column.\nOrange: the LIMIT clause of the SoQL query, used to limit the response to 2000 records. If we don’t indicate this, the default will be used, which is 1000 records.\n\nNotice that the ? symbol separates the endpoint from the query parameters, and each clause is separated by an & symbol. To indicate the start of a clause, a $ is used.\nThis request will be sent using the GET HTTP method.\nWith this in mind, we can return to Mage. We’ll begin by creating the first three blocks, which will focus on retrieving metadata. The primary purpose of these blocks is to provide the downstream block with the necessary information on what data to fetch from the endpoint and how to fetch it.\n\n\n\n\n\n\nNote\n\n\n\nIn this tutorial, we will adopt the writing style of The Rust Programming Language book, where the file path is shown before each code block. This approach allows you to easily follow the project’s structure. The complete code for the project is available on the GitHub repo. Also, the function docstrings have been removed from this article. However, you can review the complete technical documentation of each function by checking the files in the repo.\n\n\n\nWriting our first Mage blocks\nHere we will implement our first block, two of them will fetch metadata from the SODA API, and another one will get metadata from our local database (DuckDB). First lets go to our already created pipeline, socrata_iowa_liquor_pipeline. But if you want to follow this tutorial from scratch, you can also create a new pipeline, for example, socrata_iowa_liquor_pipeline_from_scratch, and continue working from there. With the intuitive Mage UI, it will be easy for you to create this new pipeline.\nOur first block:\n\n\n\nCreating our first block.\n\n\nHere, select the first option, Data loader, then navigate to the creation option and select Python as the language, and then API as the source, then name the block get_schema_from_metadata. When created, the block will come with a template like this:\nFilename: data_loaders/get_schema_from_metadata.py\n\n1import io\nimport pandas as pd\nimport requests\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n2@data_loader\ndef load_data_from_api(*args, **kwargs):\n    \"\"\"\n    Template for loading data from API\n    \"\"\"\n    url = ''\n    response = requests.get(url)\n\n    return pd.read_csv(io.StringIO(response.text), sep=',')\n\n\n3@test\ndef test_output(output, *args) -&gt; None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n\n\n1\n\nImports: block’s prelude.\n\n2\n\nMain functionality: since this is a data loader I has the @data_loader decorator on top.\n\n3\n\nTest for data validation: accepts the output data of the block. If any of the tests fail, the block execution will also fail.\n\n\n\n\nMage provides a variety of templates designed to guide you and save time. These templates were incredibly helpful when we6 first started building data pipelines. Notices the structure of a block, it is composed by three sections: library imports, a function, and a test. The function handles the main task of the block, while the test ensures that the block’s main functionality works as intended.\nNext, we’ll modify the template to suit our specific use case. Overwrite the content of your newly created block with the following code, and let’s proceed to analyze it:\nFilename: data_loaders/get_schema_from_metadata.py\n\nimport io\n1import polars as pl\n2import requests\nif 'data_loader' not in globals():\n3    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n4    from mage_ai.data_preparation.decorators import test\n\n# Map API data types to Polars types\n5SODA_TO_POLARS = {\n    \"text\": pl.Utf8,\n    \"number\": pl.Float64, \n    \"calendar_date\": pl.Datetime(\"us\"),\n    \"floating_timestamp\": pl.Datetime(\"us\"),  \n}\n\n\n# Loads the schema (i.e., types) of our data set\n6@data_loader\ndef load_data_schema_from_api(*args, **kwargs):\n\n7    url = 'https://{DOMAIN}/api/views/{DATASET_ID}'.format(**kwargs)\n    response = requests.get(url)\n\n    metadata = response.json()\n    columns = metadata.get(\"columns\", [])\n    schema = {\n8        col[\"fieldName\"]: SODA_TO_POLARS.get(col[\"dataTypeName\"], pl.Utf8)\n        for col in columns\n9        if not col[\"fieldName\"].startswith(\":@computed_\")\n        }\n    \n    return schema\n\n10@test\ndef test_output(dictionary, *args) -&gt; None:\n    assert dictionary is not None, \"The output is undefined\"\n    assert isinstance(dictionary, dict), \"The output is not a dictionary\"\n    assert len(dictionary) &gt; 0, \"The dictionary is empty\"\n\n\n1\n\nPolars: used for data manipulation and type mapping throughout the project.\n\n2\n\nHTTP library: requests is used to send HTTP requests to the API.\n\n3\n\nLoader decorator: the @data_loader decorator marks the function as a Mage data loader block.\n\n4\n\nTest decorator: the @test decorator defines a test for validating the function’s output.\n\n5\n\nSocrata to Polars type mapping: the SODA_TO_POLARS dictionary maps Socrata data types to corresponding Polars types, ensuring compatibility.\n\n6\n\nFunction decoration: the loader function load_data_schema_from_api is decorated with @data_loader to integrate it into the Mage pipeline.\n\n7\n\nEndpoint definition: the endpoint URL is dynamically generated using the global variables DOMAIN and DATASET_ID. This is where the schema metadata is fetched.\n\n8\n\nDictionary comprehension: the schema dictionary maps column names to their corresponding Polars types, based on the SODA_TO_POLARS dictionary. Unrecognized types default to Utf8.\n\n9\n\nExclusion columns: columns with names starting with :@computed_ are excluded from the schema.\n\n10\n\nTest function: the @test decorator validates the loader’s output, ensuring it is a non-empty dictionary of the correct type.\n\n\n\n\nThe primary goal of the get_schema_from_metadata block is to retrieve data type information to standardize batch ingestion. While Polars can infer data types based on the content they read, each batch may differ in structure. This inconsistency can lead to errors and prevent us from merging batches later. We can resolve this issue by specifying data types and ensuring a consistent schema across all batches.\nPlease notice that we use Polars for data transformation and manipulation. Compared with Pandas, Polars offers better performance and scalability, making it a more cost-effective choice for production systems. This case study demonstrates that Polars can reduce computational costs, making it a good choice for projects that may eventually transition to production. Polars is a mature and robust library with extensive capabilities, making it an excellent choice for this project.\nWe can illustrate how the Mage flow operates using our first block. Initially, the block performs its main task—fetching data from an API in this example. The instructions for this task are defined in the block’s primary function, which is identified by the @data_loader decorator. Once the main task is completed, its output is passed to the tests, marked with the @test decorator. If all tests are successful, the output is forwarded to the next block in the stream.\nWhen you first looked at Named figure 1, you might have wondered why storage spans the entire process and why Apache Arrow and Parquet are included in the storage block alongside DuckDB. This is because data storage underpins every major stage, with data being stored multiple times throughout its life cycle. Mage uses PyArrow to handle data serialization and deserialization between blocks during these storage steps7. For disk storage, PyArrow serializes the data into the Parquet format. For more details, you can check the the documentation.\nBelow is an overview of how Mage blocks function:\n\n\n\n\n\n\nNamed figure 2: Overview of Mage blocks functioning.\n\n\n\nCongrats! You just implemented your first Mage block. Let’s test it, you can do this with the “play” icon in the header of the block:\n\nAfter the block runs, you should be able to see the output in the tail of the block:\n\nWe see a message indicating that the test passed and how Mage tries to display the output dictionary.\nNext, we will query the number of records (invoices) per year. To achieve this, we will create a data loader block named soda_records_per_year. The content of this block will look as follows:\nFilename: data_loaders/soda_records_per_year.py\n\n1import io\nimport polars as pl\nimport requests\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n2@data_loader\ndef load_data_from_api(*args, **kwargs):\n    # SoQL to get the the number of invoices per year\n    data_url = \"https://data.iowa.gov/resource/m3tr-qhgy.csv?$select=date_extract_y(date) AS year, count(invoice_line_no) AS rows&$group=date_extract_y(date)\"\n    print(\"\\n\")\n    print(\"Fetching the records-per-year metadata. This might take a couple minutes..\")\n    response = requests.get(data_url)\n    print(\"Done! We have our year record metadata.\\n\")\n    data = pl.read_csv(io.StringIO(response.text))\n    \n    return data\n\n\n3@test\ndef test_output(output, *args) -&gt; None:\n    assert output is not None, 'The output is undefined'\n    assert isinstance(output, pl.DataFrame), 'The output is not a Polars DataFrame'\n\n\n1\n\nYou might have noticed that we use the io module to handle the API responses. Specifically, we utilize the StringIO() class to treat the response as a document. Otherwise, Polars will complain.\n\n2\n\nHere, we make a SoQL query to the API, and load the response into a Polars data frame.\n\n3\n\nWe also validate that the block’s output is not empty and confirm that it is a Polars data frame.\n\n\n\n\nIn this block we request the records per year to the API, for this we make use of the SoQL language provided by the API developers:\nhttps://data.iowa.gov/resource/m3tr-qhgy.csv?$select=date_extract_y(date) AS year, count(invoice_line_no) AS rows&$group=date_extract_y(date)\nAnd again, we can dissect this request:\n\nTeal: endpoint.\nBlue: query.\n\nIf we translate this query to SQL, we would have something like this:\n\nSELECT YEAR(date) AS year\n       COUNT(invoice_line_no) AS rows\nFROM m3tr-qhgy -- Iowa Liquor Sales table\nGROUP BY YEAR(date)\n\nThe output should be a table displaying the number of records for each year. This information will be used to determine the $limit clause when retrieving data later.\nTo complete the upstream blocks, we will create another block to check the data available in our local DuckDB database. I named this block check_local_db. It is of type “custom,” though it could also have been implemented as a data loader.\nFilename: custom/check_local_db.py\n\n# -- snip --\n\n1db_path = 'data/iowa_liquor.duckdb'\n\n@custom\ndef check_last_year(*args, **kwargs):\n2    conn = duckdb.connect(\"data/iowa_liquor.duckdb\")\n    \n3    try:\n        result = conn.execute(\"\"\"\n        SELECT EXTRACT(YEAR FROM MAX(date)) FROM iowa_liquor_sales\n        \"\"\").fetchall()\n        last_year = result[0][0]\n\n4    except duckdb.CatalogException as e:\n        print(\"The table doesn't exist; assigning rows_in_db=0\")\n        last_year = 0\n\n5    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        last_year = 0\n\n    # Close DB connections\n6    conn.close()\n\n7    return last_year\n\n# -- snip --\n\n\n1\n\nDefine the path to the database. For this project, the database will be stored in the file data/iowa_liquor.duckdb.\n\n2\n\nEstablish a connection to the local database. If the file iowa_liquor.duckdb does not exist, DuckDB will automatically create it.\n\n3\n\nQuery the date of the most recent invoice in the database and extract the year. Use .fetchall() to retrieve the query output as a Python object8.\n\n4\n\nIf the table does not yet exist in the database, return 0 as the year.\n\n5\n\nIf any other exception occurs, also return 0 as the year.\n\n6\n\nExplicitly close the database connection to avoid blocking access for downstream processes.\n\n7\n\nReturn the most recent year as an int.\n\n\n\n\nThis block is designed to monitor the local database, enabling efficient updates by avoiding the need to fetch all data every time. This approach ensures faster processing and reduces resource consumption.\nWith that, we’ve completed the first layer of Mage blocks. The next step downstream involves retrieving the data of interest. In this stage, we will use the outputs of the three blocks we just created\n\n\nPulling the Iowa Liquor Sales data\nWith the metadata in place, we can now retrieve the sales data of interest by creating the pull_data_from_socrata block. Once this loader block is created, connect the upstream blocks to it in the following order:\n\nget_schema_from_metadata\nsoda_records_per_year\ncheck_local_db\n\nYou can make this configuration in the “Tree” panel to the right of your Mage code editor:\n\nThe final configuration should look like this:\n\nThis will ensure the parameter order remains consistent for you as well. While we know this block will utilize data from the three upstream blocks, how do we access this data in our code? The answer lies in the header of our new block, which contains all the information we need:\n\nIn this header, we receive all the necessary information to consume the upstream data. It includes an example showing the parameter order and how they correspond to each upstream block. The loader function, identified by the @data_loader decorator, provides a clear structure.\nThe parameter names (data, data_2, data_3) are arbitrary, allowing you to choose names that best suit your function. However, what matters most is the positional order of the parameters. Specifically:\n\nThe first parameter corresponds to the output of get_schema_from_metadata.\nThe second parameter corresponds to soda_records_per_year.\nThe third parameter corresponds to check_local_db.\n\nWith this in mind, we can proceed to define the content of this block. Since there is a lot to cover, we’ll break it down into three sections: the imports, the loader function, and the tests. Let’s start with the dependencies for this block:\nFilename: data_loaders/pull_data_from_socrata.py\n\nimport io\nimport polars as pl\nimport requests\n1from math import ceil\n2from concurrent.futures import ThreadPoolExecutor, as_completed\n3from tqdm import tqdm\n\n# -- snip --\n\n\n1\n\nRound numbers to the nearest ceiling.\n\n2\n\nWe will implement a multithreading approach to speed up the data retrieval process.\n\n3\n\nA progress bar. Provides real-time feedback on the data-pulling progress, which besides of being helpful for the user, it’s also supportive for debugging purposes.\n\n\n\n\nNothing weird in the imports. Now, let’s review the most complex part of our implementation, the loader function:\nFilename: data_loaders/pull_data_from_socrata.py\n\n# -- snip --\n\n@data_loader\n1def load_data_from_api(schema,\n                       records_per_year,\n                       last_year_in_local_db,\n                       *args, **kwargs):\n\n2    DOMAIN     = 'data.iowa.gov'\n    DATASET_ID = 'm3tr-qhgy'\n    base_url   = f\"https://{DOMAIN}/resource/{DATASET_ID}.csv?\"\n    query_url  = \"$where=date_extract_y(date)={}&$limit={}\"\n    records_per_year = records_per_year.with_columns(\n    pl.format(base_url + query_url, pl.col(\"year\"), pl.col(\"rows\")).alias(\"url\")\n    )\n\n3    records_per_year = records_per_year.filter(pl.col(\"year\") &gt;= last_year_in_local_db)\n\n    if (last_year_in_local_db != records_per_year[\"year\"].max()) & last_year_in_local_db != 0:\n        # We're limiting to five years per job so our machine dont explode\n        records_per_year = records_per_year.sort(\"year\").head(6)\n        records_per_year = records_per_year.filter(pl.col(\"year\") != last_year_in_local_db)\n    \n    # We're limiting to five years per job so our machine dont explode\n4    records_per_year = records_per_year.sort(\"year\").head(5)\n\n    # Years we will request to the API\n5    requests_list = records_per_year[\"url\"].to_list()\n\n    print(\"SODA data pull started.\")\n\n    # Report to the user which years we will be working with\n    years_to_fetch = records_per_year[\"year\"].to_list()\n    print(\"Years to be fetched: {}.\".format(\", \".join(map(str, years_to_fetch))))\n    \n# -- snip --\n\n\n1\n\nParameter order: remember, the order of the parameters matters, but you can name them however you like.\n\n2\n\nCustomizing API requests: The records_per_year data frame is used to construct the URLs for API requests. It customizes the SoQL query for each year, with a unique $limit value tailored to the data volume for that year.\n\n3\n\nExcluding existing data: an additional filter ensures that years already present in the local database are excluded from the requests.\n\n4\n\nData pull limit: to prevent overloading your machine, we limit data pulls to a maximum of five years per run. Adjust this limit based on your system’s capacity.\n\n5\n\nURL list: after filtering, the formatted URLs are collected into a list, which will be used later for parallel data fetching.\n\n\n\n\nUp to this point, the process has been straightforward. We simply used some upstream data (records_per_year) to format the URLs needed for API requests, applying a few Polars transformations for text formatting. Lets continue reviewing the concurrent fetch of the data.\nFilename: data_loaders/pull_data_from_socrata.py\n\n# -- snip --\n\n@data_loader\ndef load_data_from_api(schema,\n                       last_year_in_local_db,\n                       records_per_year,\n                       *args, **kwargs):\n\n# -- snip --\n\n1    def fetch_batch(data_url):\n        \"\"\"Fetch data for a given URL.\"\"\"\n        try:\n            response = requests.get(data_url)\n            response.raise_for_status()  # Raise an error for bad responses\n            return pl.read_csv(io.StringIO(response.text), schema = schema)\n        except Exception as e:\n            print(f\"Error fetching data from {data_url}: {e}\")\n            return pl.DataFrame(schema = schema)\n\n    # Use ThreadPoolExecutor for concurrent API calls\n    df_list = []\n2    with ThreadPoolExecutor(max_workers = 3) as executor:\n        \n3        futures = {executor.submit(fetch_batch, url): url for url in requests_list}\n4        for future in tqdm(as_completed(futures), total=len(futures), desc=\"Fetching data\"):\n            url = futures[future]\n            try:\n5                data = future.result()\n                if not data.is_empty():\n                    df_list.append(data)\n            except Exception as e:\n                print(f\"Error processing URL {url}: {e}\")\n\n6    all_pulled_data = pl.concat(df_list, how=\"vertical\")\n\n7    return all_pulled_data\n\n\n1\n\nFirst we have to define a function that will handle the requests. It receives an URL, makes the GET request, and returns a Polars data frame with the data. In case there is an error in our request, it also handles that.\n\n2\n\nInitializes a thread pool with a maximum of three workers (max_workers = 3), allowing up to three API requests to be executed concurrently. This will help to speed up the data retrieval. The with statement is used for context management, ensuring the thread pool is properly shut down once all threads have completed their work.\n\n3\n\nHere were we submit tasks to the thread pool. A dictionary is created using comprehension. The executor.submit(...) method schedules the fetch_batch function to run in a separate thread with url as its argument, returning a Future object. The resulting futures dictionary maps these Future objects to their corresponding URLs.\n\n4\n\nTo monitor progress, the code iterates over the Future objects as they complete (using as_completed) and tracks progress with tqdm, providing real-time feedback to the user.\n\n5\n\nRetrieves the results, for each completed task, future.result() is called to retrieve the result of the fetch_batch function. This method waits for the task to finish and returns the resulting Polars data frame.\n\n6\n\nAll data frames are merged into a single one.\n\n7\n\nFinally, the merged data frame containing all the requested data is returned.\n\n\n\n\nSo, this function utilizes ThreadPoolExecutor to submit API requests for all the URLs in requests_list. Tasks are executed in parallel based on the number of workers specified. Progress is monitored using tqdm, which updates the progress bar in real-time. The result (a Polars data frame) is retrieved and validated for each completed task. Once all tasks are complete, the individual data frames are merged into a single data frame, which is then returned. The process is illustrated in the following chart.\n\n\n\nAsynchronous data fetching\n\n\n\n\nTesting\nWith the main functionality complete, ensuring that the loader runs reliably is essential, even when the code requires adjustments9. To achieve this, we write tests to verify its behavior. Additionally, to maintain the best data quality in our pipeline, these tests also focus on ensuring the integrity and consistency of the data.\nLet’s review the final part of our block, which consists of three tests. These tests are designed to validate certain expectations of the data, such as ensuring no null values in specific columns, and to verify the overall integrity of the data.\nFilename: data_loaders/pull_data_from_socrata.py\n\n# -- snip --\n\n1@test\ndef test_output(output, *args) -&gt; None:\n    \"\"\"\n    Validates the output of data pulling block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n    assert isinstance(output, pl.DataFrame), \"The output is not a a Polars data frame\"\n    assert len(output) &gt; 0, \"The data frame is empty\"\n\n2@test\ndef test_invoice_line_no_not_null_output(output, *args) -&gt; None:\n    \"\"\"\n    Test the new invoice_line_no column contains no nulls.\n    \"\"\"\n    assert output[\"invoice_line_no\"].is_null().sum() == 0, \"The invoice_line_no column contain null values, it shouldn't\"\n\n3@test\ndef test_date_not_null_output(output, *args) -&gt; None:\n    \"\"\"\n    Test the new date column contains no nulls.\n    \"\"\"\n    assert output[\"date\"].is_null().sum() == 0, \"The date column contain null values, it shouldn't\"\n\n\n1\n\nVerify that the output is a non-empty Polars data frame containing valid content.\n\n2\n\nEnsure that the invoice_line_no column contains no null values.\n\n3\n\nConfirm that the date column contains no null values.\n\n\n\n\nWhen writing tests for your blocks, always include the @test decorator. This informs Mage to treat the functions as tests. In these examples, we verified the basic integrity of the resulting data frame and enforced specific rules for two columns. If everything went smoothly, you should see a confirmation message for each test that passed after running the block.\n\nAnd we just finished implementing the data ingestion part of our pipeline! :D"
  },
  {
    "objectID": "data_pipeline_mage.html#transform-the-data",
    "href": "data_pipeline_mage.html#transform-the-data",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Transform the data",
    "text": "Transform the data\nWith the retrieved data in hand, we now focus on transforming it. As illustrated in Named figure 2, after fetching the data and running the tests, the block serializes the data to pass it downstream. The next step is to implement these downstream blocks to transform the data and generate new variables.\n\nHave present the bussiness logic\nThe dataset offers a wealth of information, including product descriptions and geolocation points, providing ample opportunities for deeper insights and analysis. To enhance this further, we will create new variables that reveal additional business insights, enabling us to answer more interesting questions. We’ve organized the transformations into the following business-logic blocks:\n\nproduct_transformations: generates general product descriptions, such as liquor type or packaging size.\nsales_and_price_related_metrics: creates variables like profits and costs.\nvolume_based_features: develops features related to the liquid volume of sales.\ntime_based_features: generates temporal variables for time-based analysis.\n\n\n\nLet’s transform our data\nMost of the code in these blocks will be Polars transformations. If you are familiar with PySpark you will find that the syntax is similar, no worries if this is your first time with Polars, let’s review what the code does.\nFilename: transformers/product_transformations.py\n\n# -- snip --\n\n@transformer\ndef transform(data, *args, **kwargs):\n    data = data.with_columns(\n        # Categorize liquors\n1        pl.when(pl.col(\"category_name\").str.contains(\"VODK\")).then(\"Vodka\")\n        .when(pl.col(\"category_name\").str.contains(\"WHISK\")).then(\"Whisky\")\n        .when(pl.col(\"category_name\").str.contains(\"RUM\")).then(\"Rum\")\n        .when(pl.col(\"category_name\").str.contains(\"SCHN\")).then(\"Schnapps\")\n        .when(pl.col(\"category_name\").str.contains(\"TEQ\")).then(\"Tequila\")\n        .when(\n            pl.col(\"category_name\").str.contains(\"BRANDIE\")\n            | pl.col(\"category_name\").str.contains(\"BRANDY\")\n            ).then(\"Brandy\")\n        .when(pl.col(\"category_name\").str.contains(\"GIN\")).then(\"Gin\")\n        .when(pl.col(\"category_name\").str.contains(\"MEZC\")).then(\"Mezcal\")\n        .when(\n            pl.col(\"category_name\").str.contains(\"CREM\")\n            | pl.col(\"category_name\").str.contains(\"CREAM\")\n            ).then(\"Cream\")\n        .otherwise(\"Other\")\n        .alias(\"liquor_type\"),\n        # Is premium\n2        (pl.col(\"state_bottle_retail\") &gt;= 30).alias(\"is_premium\"),\n        # Bottle size category\n3        pl.when(pl.col(\"bottle_volume_ml\") &lt; 500).then(\"small\")\n        .when((pl.col(\"bottle_volume_ml\") &gt;= 500) & (pl.col(\"bottle_volume_ml\") &lt; 1000)).then(\"medium\")\n        .otherwise(\"large\")\n        .alias(\"bottle_size\")\n        )\n\n    print(\"Product-related new variables, generated.\")\n    return data\n\n# -- snip --\n\n\n1\n\nCategorize the liquor type (Tequila, Whisky, etc.).\n\n2\n\nDetermine whether the product is considered premium based on its individual price.\n\n3\n\nClassify the product by size.\n\n\n\n\nIn this context, data represents the upstream DataFrame passed to this block by pull_data_from_socrata. It is the first parameter of the transform transformer. The Polars transformation begins with the with_columns method, which is used to add or replace columns in the DataFrame.\nWithin with_columns, we define the transformations. To create the first new variable, we use the pl.when() function to start a conditional statement. To reference a column, we use the pl.col() function. If you are familiar with Pandas or dplyr, this might feel counterintuitive at first, but it works in a similar fashion—just pass the column name as a string, e.g., pl.col(\"your_col\").\nOnce the column is selected, we apply the .str.contains() method to check if the string in a cell contains a specified pattern. If the pattern matches, the value specified in .then() will be used. We can chain additional .when() statements for more conditions, and the default value, used when no condition is met, is specified with .otherwise(\"Other\"). To name the new column, we use .alias(\"liquor_type\"). If the name matches an existing column, it will overwrite that column.\nThis transformation leverages chained operations, a powerful feature in Polars. Most Polars methods return a DataFrame, allowing you to immediately chain additional methods. This enhances code readability and makes debugging easier. Note that after the .alias() method, there is a comma , instead of a dot ., indicating the end of the chain.\nNext, we proceed with premium and size categorizations in a similar manner.\n\n\nTest, test, test!\nOnce the new variables are created, we will write tests for the outputs to ensure a baseline level of quality for the new data.\nFilename: transformers/product_transformations.py\n\n# -- snip --\n\n1@test\ndef test_output(output, *args) -&gt; None:\n    assert output is not None, 'The output is undefined'\n\n2@test\ndef test_liquor_type_col(output, *args) -&gt; None:\n    assert output.get_column(\"liquor_type\") is not None, 'The column liquor_type is undefined'\n    assert output.get_column(\"liquor_type\").dtype is pl.Utf8, \"The new variable type doesn't match\"\n\n3@test\ndef test_is_premium_col(output, *args) -&gt; None:\n    assert output.get_column(\"is_premium\") is not None, 'The column is_premium is undefined'\n    assert output.get_column(\"is_premium\").dtype is pl.Boolean, \"The new variable type doesn't match\"\n\n4@test\ndef test_bottle_size_col(output, *args) -&gt; None:\n    assert output.get_column(\"bottle_size\") is not None, 'The column bottle_size is undefined'\n    assert output.get_column(\"bottle_size\").dtype is pl.Utf8, \"The new variable type doesn't match\"\n\n\n1\n\nValidate the overall output for correctness.\n\n2\n\nVerify the liquor_type column’s content and data type.\n\n3\n\nCheck the is_premium column’s content and data type.\n\n4\n\nEnsure the bottle_size column’s content and data type are correct.\n\n\n\n\nNotice that each new variable has at least one associated test. While more detailed tests can be added later, these initial ones will suffice for now. And that’s essentially how a transformation block is structured. The next three transformation blocks follow a similar pattern, so I won’t explain them in detail, but feel free to review them as needed.\n\nsales_and_price_related_metrics\nvolume_based_features\ntime_based_features\n\nThat concludes our data transformation step! Next, we’ll move on to storing our valuable data."
  },
  {
    "objectID": "data_pipeline_mage.html",
    "href": "data_pipeline_mage.html",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "",
    "text": "WARNING: Please take into account that some expressions won’t make sense, the doc is unorganized, and plagued of typos. I published this early since it is easier for me to edit the repo and the article this way :)"
  },
  {
    "objectID": "data_pipeline_mage.html#storage",
    "href": "data_pipeline_mage.html#storage",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Storage",
    "text": "Storage\nWith a robust method for retrieving and transforming our data, the next step is to store and query it efficiently. For this purpose, we’ll use DuckDB. But why choose DuckDB?\nDuckDB is well-known for its in-memory data manipulation capabilities, but it also supports persistent storage with several compelling advantages. By using DuckDB’s native storage format, we gain the following benefits:\n\nFree and open source: DuckDB is free and open-source, aligning with our preference for accessible and transparent tools10.\nLightweight compression: it employs advanced compression techniques to reduce storage space while maintaining efficiency.\nColumnar vectorized query execution: DuckDB processes data in chunks (vectors) rather than row-by-row, making efficient use of CPU and memory. This design is optimized for modern hardware architectures. For a comprehensive explanation, see Kersten et al. (2018).\nCompact file structure: DuckDB stores data in a compact, self-contained binary file, making it portable and easy to manage.\nComprehensible resources: besides excellent documentation, DuckDB has a fantastic community that makes it easy to use this database system. You can get a free “DuckDB in Action” copy on the MotherDuck webpage11.\n\nDue to this and its ease of use12, DuckDB is an ideal tool for our purpose. So let’s continue with the implementation of our storage step.\nAfter we have finished with our data transformers, we can move to the data exporters. Here, we could have done this by creating only one data exporter, but for the sake of keep the blocks simple and modular (only one task per block) I decided to create two blocks for the data exportation, one for creating the table we will use to store our data, and a last one to export the data. We will start by analyzing the block responsible of the table creation.\nFilename: data_exporters/create_duckdb_table.py\n\nimport os\nimport duckdb\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n# -- snip --\n\nWe specify the query for table creation:\nFilename: data_exporters/create_duckdb_table.py\n\n# -- snip --\n\ncreate_table_query = \"\"\"\n    CREATE TABLE IF NOT EXISTS iowa_liquor_sales (\n        invoice_line_no TEXT PRIMARY KEY NOT NULL,\n        date TIMESTAMP NOT NULL,\n        store TEXT,\n        name TEXT,\n        address TEXT,\n        city TEXT,\n        zipcode TEXT,\n        store_location TEXT,\n        county_number TEXT,\n        county TEXT,\n        category TEXT,\n        category_name TEXT,\n        vendor_no TEXT,\n        vendor_name TEXT,\n        itemno TEXT,\n        im_desc TEXT,\n        pack REAL,\n        bottle_volume_ml REAL,\n        state_bottle_cost REAL,\n        state_bottle_retail REAL,\n        sale_bottles REAL,\n        sale_dollars REAL,\n        sale_liters REAL,\n        sale_gallons REAL,\n        liquor_type TEXT,\n        is_premium BOOLEAN,\n        bottle_size TEXT,\n        gov_profit_margin REAL,\n        gov_retail_markup_percentage REAL,\n        price_per_liter REAL,\n        price_per_gallon REAL,\n        total_volume_ordered_L REAL,\n        volume_to_revenue_ratio REAL,\n        week_day INTEGER,\n        is_weekend BOOLEAN,\n        quarter INTEGER\n);\n\"\"\"\n\n# -- snip --\n\nExporter:\nFilename: data_exporters/create_duckdb_table.py\n\n# -- snip --\n\n@data_exporter\ndef export_data(data, *args, **kwargs):\n    # Create a connection to a file called 'data/iowa_liquor.duckdb'\n    # If the file doesn't exist it should create it\n    conn = duckdb.connect(\"data/iowa_liquor.duckdb\")\n    # Create a table and load data into it\n    conn.sql(create_table_query)\n    # Explicitly close the connection\n    conn.close()\n    \n    # Pass the unmodified data\n    return data\n\n# -- snip --\n\nTests: Filename: data_exporters/create_duckdb_table.py\n\n# -- snip --\n\n@test\ndef test_output(output, *args) -&gt; None:\n    \"\"\"\n    Test the output exists.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n\n@test\ndef db_exist(*args) -&gt; None:\n    \"\"\"\n    Test there is a .duckdb file.\n    \"\"\"\n    assert os.path.exists(\"data/iowa_liquor.duckdb\"), \"The database file doesnt exist\"\n\nBash execution\n\nuser@user-pc:~/mage_duckdb_pipeline$ mage run . socrata_iowa_liquor_pipeline\nFetching the records-per-year metadata. This might take a couple minutes..\nDone! We have our year record metadata.\n\nSODA data pull started.\nYears to be fetched: 2017, 2018, 2019, 2020, 2021.\nFetching data: 100%|█████████████████████████████████████| 5/5 [10:08&lt;00:00, 121.69s/it]\nProduct-related new variables, generated.\nSales and price related metrics, computed.\nVolume-based features, computed.\nTime-based features, computed.\nData loaded to your DuckDB database!\nPipeline run completed.\n\n\nconn2 &lt;- DBI::dbConnect(\n  drv = duckdb::duckdb(),\n  dbdir = \"../data/iowa_liquor.duckdb\",\n  read_only = TRUE\n)\n\n\nimport duckdb\n\ncon_py = duckdb.connect(\"../data/iowa_liquor.duckdb\", read_only=True)\n\npolars_df = con_py.sql(\"SELECT liquor_type, bottle_size, price_per_liter FROM iowa_liquor_sales LIMIT 10\").pl()\n\npolars_df\n\n\npolars_df.height"
  },
  {
    "objectID": "data_pipeline_mage.html#persistent-storage-and-serving",
    "href": "data_pipeline_mage.html#persistent-storage-and-serving",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Persistent storage and serving",
    "text": "Persistent storage and serving\nWith a robust method for retrieving and transforming our data, the next step is to store and query it efficiently. For this purpose, we’ll use DuckDB. But why choose DuckDB?\nDuckDB is well-known for its in-memory data manipulation capabilities, but it also supports persistent storage with several compelling advantages. By using DuckDB’s native storage format, we gain the following benefits:\n\nFree and open source: DuckDB is free and open-source, aligning with our preference for accessible and transparent tools10.\nLightweight compression: it employs advanced compression techniques to reduce storage space while maintaining efficiency.\nColumnar vectorized query execution: DuckDB processes data in chunks (vectors) rather than row-by-row, making efficient use of CPU and memory. This design is optimized for modern hardware architectures. For a comprehensive explanation, see Kersten et al. (2018).\nCompact file structure: DuckDB stores data in a compact, self-contained binary file, making it portable and easy to manage.\nComprehensible resources: besides excellent documentation, DuckDB has a fantastic community that makes it easy to use this database system. You can get a free “DuckDB in Action” copy on the MotherDuck webpage11.\n\nDue to this and its ease of use12, DuckDB is an ideal tool for our purpose. So let’s continue with the implementation of our storage step.\nAfter we have finished with our data transformers, we can move to the data exporters. Here, we could have done this by creating only one data exporter, but for the sake of keep the blocks simple and modular (only one task per block) I decided to create two blocks for the data exportation, one for creating the table we will use to store our data, and a last one to export the data. We will start by analyzing the block responsible of the table creation.\nFilename: data_exporters/create_duckdb_table.py\n\n1import os\n2import duckdb\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n# -- snip --\n\n\n1\n\nWe will use the os module in our tests.\n\n2\n\nPython DuckDB client.\n\n\n\n\nWe start with the imports—of course, we’ll need the DuckDB client. If you’ve been following this tutorial, you should have installed it along with the dependencies. Next, we define a query to create the table where we will store our data. This step is crucial to specify the data types for each column.\nAnother critical aspect is defining constraints for the table. Here, we specify that two columns cannot contain null values and designate invoice_line_no as the primary key. But is this necessary? If we aim to enforce data integrity and prevent duplication, the answer is yes.\nFilename: data_exporters/create_duckdb_table.py\n\n# -- snip --\n\ncreate_table_query = \"\"\"\n    CREATE TABLE IF NOT EXISTS iowa_liquor_sales (\n        invoice_line_no TEXT PRIMARY KEY NOT NULL,\n        date TIMESTAMP NOT NULL,\n        store TEXT,\n        name TEXT,\n        address TEXT,\n        city TEXT,\n        zipcode TEXT,\n        store_location TEXT,\n        county_number TEXT,\n        county TEXT,\n        category TEXT,\n        category_name TEXT,\n        vendor_no TEXT,\n        vendor_name TEXT,\n        itemno TEXT,\n        im_desc TEXT,\n        pack REAL,\n        bottle_volume_ml REAL,\n        state_bottle_cost REAL,\n        state_bottle_retail REAL,\n        sale_bottles REAL,\n        sale_dollars REAL,\n        sale_liters REAL,\n        sale_gallons REAL,\n        liquor_type TEXT,\n        is_premium BOOLEAN,\n        bottle_size TEXT,\n        gov_profit_margin REAL,\n        gov_retail_markup_percentage REAL,\n        price_per_liter REAL,\n        price_per_gallon REAL,\n        total_volume_ordered_L REAL,\n        volume_to_revenue_ratio REAL,\n        week_day INTEGER,\n        is_weekend BOOLEAN,\n        quarter INTEGER\n);\n\"\"\"\n\n# -- snip --\n\nThis query also helps eliminate potential ambiguities when the data is exported. With the query defined, we can now move on to the main functionality of this block, the exporter13. The logic is quite simple.\nFilename: data_exporters/create_duckdb_table.py\n\n# -- snip --\n\n@data_exporter\ndef export_data(data, *args, **kwargs):\n\n1    conn = duckdb.connect(\"data/iowa_liquor.duckdb\")\n2    conn.sql(create_table_query)\n3    conn.close()\n    \n4    return data\n\n# -- snip --\n\n\n1\n\nCreate a connection to a file called data/iowa_liquor.duckdb. If the file doesn’t exist it should create it\n\n2\n\nCreates the table with our query.\n\n3\n\nExplicitly close the connection so no access to the database is blocked downstream\n\n4\n\nReturn the unmodified data that was passed upstream.\n\n\n\n\nHere, we connect to our local database, create the table if it doesn’t exist, and close the connection to avoid blocking its access downstream. And that’s the main task of this block. Then, we validate that untouched upstream data has been passed and that the database file is also there:\nFilename: data_exporters/create_duckdb_table.py\n\n# -- snip --\n\n@test\ndef test_output(output, *args) -&gt; None:\n    assert output is not None, 'The output is undefined'\n\n@test\ndef db_exist(*args) -&gt; None:\n    assert os.path.exists(\"data/iowa_liquor.duckdb\"), \"The database file doesnt exist\"\n\nNow we move to the real exporter, and the last block of our flow. And as you already guessed, here is where we store the retrieved data to our local database. First we establish a connection with our database, and use the object conn to interact with it, then we try to insert the freshly fetched and transformed data to the table iowa_liquor_sales. If a constraint exception is raised we check for duplicates in out batch, exclude them, and try to insert them again. This exception handling will be specially useful when we are at the stage of just updating with the last records our data base. You can examine this in the block:\nFilename: data_exporters/export_polars_to_duckdb.py\n\n# -- snip --\n\n@data_exporter\ndef insert_data_in_table(data, *args, **kwargs):\n1    conn = duckdb.connect(\"data/iowa_liquor.duckdb\")\n\n2    try:\n        conn.register(\"data\", data)\n        conn.execute(\"INSERT INTO iowa_liquor_sales SELECT * FROM data\")\n3    except duckdb.ConstraintException as e:\n        print(e)\n4        existing_keys_df = conn.execute(\"SELECT invoice_line_no FROM iowa_liquor_sales\").fetchdf()\n        existing_keys_series = pl.DataFrame(existing_keys_df)[\"invoice_line_no\"] \n\n        filtered_data = data.filter(~data[\"invoice_line_no\"].is_in(existing_keys_series))\n\n5        if filtered_data.height &gt; 0:\n            conn.register(\"filtered_data\", filtered_data)  \n            conn.execute(\"INSERT INTO iowa_liquor_sales SELECT * FROM filtered_data\")\n        else:\n            print(\"No new records to insert.\")\n\n6    conn.close()\n\n    print(\"Data loaded to your DuckDB database!\")\n\n\n1\n\nConnect to the local database.\n\n2\n\nAttempt to insert the data into the iowa_liquor_sales table.\n\n3\n\nIf a constraint exception occurs, it likely means the batch of data pulled contains records already present in the database.\n\n4\n\nIn case of an exception, query the invoice IDs from the local database and filter out the duplicate records from the incoming batch.\n\n5\n\nIf the filtered DataFrame still contains records, proceed with inserting them into the table.\n\n6\n\nClose the database connection to ensure safety and prevent potential issues.\n\n\n\n\nWe have finished the implementation of our pipeline! Congrats!\n\nTest the pipeline in Mage\nNow it’s time to see if it works. To do this, click on the three-dot icon in the upper-right corner of your last block (export_polars_to_duckdb).\n\nHere, select the option labeled “Execute with all upstream blocks.” This will run the entire pipeline. If an error occurs, Python/Mage will notify you, allowing you to begin debugging. If the process runs successfully, then your first batch of data will be stored in your local database."
  },
  {
    "objectID": "data_pipeline_mage.html#run-the-data-pipeline-in-the-terminal",
    "href": "data_pipeline_mage.html#run-the-data-pipeline-in-the-terminal",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Run the data pipeline in the terminal",
    "text": "Run the data pipeline in the terminal\nNow open a terminal in the project folder and run:\n\nmage run . socrata_iowa_liquor_pipeline\n\nWe use the run command to execute the pipeline. The dot (.) refers to the current directory (assuming you’re in the project’s folder), and socrata_iowa_liquor_pipeline is the name of our pipeline. If everything runs successfully, your second batch should now be stored in your local database. A successful output will look like this:\n\nuser@user-pc:~/mage_duckdb_pipeline$ mage run . socrata_iowa_liquor_pipeline\nFetching the records-per-year metadata. This might take a couple minutes..\nDone! We have our year record metadata.\n\nSODA data pull started.\nYears to be fetched: 2017, 2018, 2019, 2020, 2021.\nFetching data: 100%|█████████████████████████████████████| 5/5 [10:08&lt;00:00, 121.69s/it]\nProduct-related new variables, generated.\nSales and price related metrics, computed.\nVolume-based features, computed.\nTime-based features, computed.\nData loaded to your DuckDB database!\nPipeline run completed."
  },
  {
    "objectID": "data_pipeline_mage.html#data-analytics",
    "href": "data_pipeline_mage.html#data-analytics",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Data analytics",
    "text": "Data analytics\n\nconn2 &lt;- DBI::dbConnect(\n  drv = duckdb::duckdb(),\n  dbdir = \"../data/iowa_liquor.duckdb\",\n  read_only = TRUE\n)"
  },
  {
    "objectID": "data_pipeline_mage.html#predictive-modeling-machine-learning",
    "href": "data_pipeline_mage.html#predictive-modeling-machine-learning",
    "title": "Building a data pipeline with Mage, Polars, and DuckDB",
    "section": "Predictive modeling (machine learning)",
    "text": "Predictive modeling (machine learning)\n\nimport duckdb\n\ncon_py = duckdb.connect(\"../data/iowa_liquor.duckdb\", read_only=True)\n\npolars_df = con_py.sql(\"SELECT liquor_type, bottle_size, price_per_liter FROM iowa_liquor_sales LIMIT 10\").pl()\n\npolars_df\n\n\npolars_df.height"
  }
]